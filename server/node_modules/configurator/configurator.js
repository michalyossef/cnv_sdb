;
(function (self) {
  var isAngularJs = false;
  var isAngularNew = false;
  var isNode = false;
  if (typeof window === 'undefined') {
    isNode = true;
  }
  else {
    if (typeof angular === 'undefined') {
      isAngularNew = true;
    }
    else {
      isAngularJs = true;
    }
  }

  var registeredConfigs = {};
  var regexConfigs = [];
  var _getTargetEnvironment;
  var _getCurrentEnvironment;
  var _defaults = {};

  var mergeFn = function (target, source) {
    var obj = new Object();

    for (prop in target) {
      if (typeof target[prop] != 'object' || Array.isArray(target[prop])) {
        obj[prop] = target[prop];
      } else if (typeof target[prop] == 'object') {
        obj[prop] = mergeFn(obj[prop], target[prop]);
      }
    }

    for (prop in source) {
      if (typeof obj[prop] != 'object' || Array.isArray(target[prop])) {
        obj[prop] = source[prop];
      } else if (typeof source[prop] == 'object') {
        obj[prop] = mergeFn(obj[prop], source[prop]);
      }
    }
    return obj;
  }

  var registerConfig = function (config, environment) {
    // allow passed in environment in case of recursion from arrays of hosts/node_envs
    var env = environment || _getTargetEnvironment(config);
    if (Array.isArray(env)) {
      for (var i = 0, j = env.length; i < j; i++) {
        var singleEnv = env[i];
        registerConfig(config, singleEnv);
      }
    }
    else {
      if (env instanceof RegExp) {
        regexConfigs.push({ regex: env, config: config });
      }
      else {
        env = String(env).toLowerCase();
        registeredConfigs[env] = registeredConfigs[env] || {};
        registeredConfigs[env] = mergeFn(registeredConfigs[env], config);
      }
    }
  };

  var configurator = {};

  /** ie8 fix(ish) start **/
  // inspired by https://github.com/es-shims/es5-shim/blob/master/es5-sham.js
  // but highly simplified.
  var bendOverBackwards = false;

  function doesDefinePropertyWork(object) {
    try {
      Object.defineProperty(object, "sentinel", {
        get: function () {
          return true
        }
      });
      return object.sentinel;
    } catch (exception) {
      // returns falsy
    }
  }

  if (Object.defineProperty) {
    var definePropertyWorksOnObject = doesDefinePropertyWork({});
    var definePropertyWorksOnDom = typeof document === "undefined" ||
      doesDefinePropertyWork(document.createElement("div"));

    if (!definePropertyWorksOnObject && definePropertyWorksOnDom) {
      bendOverBackwards = true;
    }
  }

  if (bendOverBackwards) { // probably ie8 at this point.
    configurator = document.createElement('div');
  }
  /** ie8 fix(ish) end **/

  configurator.register = function (configs) {
    if (Array.isArray(configs)) {
      for (var k = 0, l = configs.length; k < l; k++) {
        var elem = configs[k];
        registerConfig(elem);
      }
    }
    else {
      registerConfig(configs);
    }
  };

  configurator.registerFile = function (options) {
    var as;
    if (options.path && isNode) {
      as = options.as || options.path;
      var path = eval(`require('path')`);
      if (!path.isAbsolute(options.path)) {
        options.path = path.resolve(process.cwd(), options.path);
      }
      var configsFromFile = eval('require(options.path)');
      delete options.path;
      delete options.as;
      var newConfigs = options;
      newConfigs[as] = configsFromFile;
      registerConfig(newConfigs);
    }
  };

  Object.defineProperty(configurator, "config", {
    get: function () {
      var env = _getCurrentEnvironment();
      // start with default environment configuration.
      var combinedEnv = mergeFn(_defaults, registeredConfigs['default'] || {});
      // merge in any regex matched configurations
      for (var m = 0, n = regexConfigs.length; m < n; m++) {
        var regexConfig = regexConfigs[m];
        if (regexConfig.regex.test(env)) {
          combinedEnv = mergeFn(combinedEnv, regexConfig.config)
        }
      }
      // before returning, add in configuraiton for exact environment string match
      return mergeFn(combinedEnv, registeredConfigs[env]);
    }
  }
  );
  Object.defineProperty(configurator, "isServer", {
    get: function () {
      return isNode;
    },
    set: function (setIsServer) {
      isNode = setIsServer;
    }
  }
  );
  Object.defineProperty(configurator, "getTargetEnvironment", {
    get: function () {
      return _getTargetEnvironment;
    },
    set: function (func) {
      _getTargetEnvironment = func;
    }
  }
  );
  Object.defineProperty(configurator, "getCurrentEnvironment", {
    get: function () {
      return _getCurrentEnvironment;
    },
    set: function (func) {
      _getCurrentEnvironment = func;
    }
  }
  );
  Object.defineProperty(configurator, "defaults", {
    get: function () {
      return _defaults;
    },
    set: function (newDefaults) {
      _defaults = newDefaults;
    }
  }
  );

  // setup default behavior for getTargetEnvironment
  configurator.getTargetEnvironment = function (configs) {
    if (isNode) {
      if (configs.NODE_ENV) {
        return configs.NODE_ENV;
      }
    }
    else {
      if (configs.HOST) {
        return configs.HOST;
      }
    }
    return 'default';
  };

  // setup default behavior for getCurrentEnvironment
  configurator.getCurrentEnvironment = function () {
    if (isNode) {
      var env = process.env.NODE_ENV || 'default';
      return env.toLowerCase();
    }
    else {
      return String(location.host).toLowerCase();
    }
  };

  if (isNode || isAngularNew) {
    module.exports = configurator;
  }
  else {
    if (isAngularJs) {
      angular.module('intcConfigurator', []);
      angular.module('intcConfigurator').provider('intcConfigurator', function () {
        var configProvider = configurator;
        configProvider.$get = function () {
          return configurator;
        };
        return configProvider;
      });
    }
    else {
      // probably shouldn't always do this in browser, but can't be sure if require is available in browser.
      self.Configurator = configurator;
    }
  }
  return configurator;
})(this);
