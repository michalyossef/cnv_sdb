/*! configurator 2018-01-08 */
!function(self){function doesDefinePropertyWork(a){try{return Object.defineProperty(a,"sentinel",{get:function(){return!0}}),a.sentinel}catch(a){}}var isAngularJs=!1,isAngularNew=!1,isNode=!1;"undefined"==typeof window?isNode=!0:"undefined"==typeof angular?isAngularNew=!0:isAngularJs=!0;var registeredConfigs={},regexConfigs=[],_getTargetEnvironment,_getCurrentEnvironment,_defaults={},mergeFn=function(a,b){var c=new Object;for(prop in a)"object"!=typeof a[prop]||Array.isArray(a[prop])?c[prop]=a[prop]:"object"==typeof a[prop]&&(c[prop]=mergeFn(c[prop],a[prop]));for(prop in b)"object"!=typeof c[prop]||Array.isArray(a[prop])?c[prop]=b[prop]:"object"==typeof b[prop]&&(c[prop]=mergeFn(c[prop],b[prop]));return c},registerConfig=function(a,b){var c=b||_getTargetEnvironment(a);if(Array.isArray(c))for(var d=0,e=c.length;d<e;d++){var f=c[d];registerConfig(a,f)}else c instanceof RegExp?regexConfigs.push({regex:c,config:a}):(c=String(c).toLowerCase(),registeredConfigs[c]=registeredConfigs[c]||{},registeredConfigs[c]=mergeFn(registeredConfigs[c],a))},configurator={},bendOverBackwards=!1;if(Object.defineProperty){var definePropertyWorksOnObject=doesDefinePropertyWork({}),definePropertyWorksOnDom="undefined"==typeof document||doesDefinePropertyWork(document.createElement("div"));!definePropertyWorksOnObject&&definePropertyWorksOnDom&&(bendOverBackwards=!0)}bendOverBackwards&&(configurator=document.createElement("div")),configurator.register=function(a){if(Array.isArray(a))for(var b=0,c=a.length;b<c;b++){var d=a[b];registerConfig(d)}else registerConfig(a)},configurator.registerFile=function(options){var as;if(options.path&&isNode){as=options.as||options.path;var path=require("path");path.isAbsolute(options.path)||(options.path=path.resolve(process.cwd(),options.path));var configsFromFile=eval("require(options.path)");delete options.path,delete options.as;var newConfigs=options;newConfigs[as]=configsFromFile,registerConfig(newConfigs)}},Object.defineProperty(configurator,"config",{get:function(){for(var a=_getCurrentEnvironment(),b=mergeFn(_defaults,registeredConfigs.default||{}),c=0,d=regexConfigs.length;c<d;c++){var e=regexConfigs[c];e.regex.test(a)&&(b=mergeFn(b,e.config))}return mergeFn(b,registeredConfigs[a])}}),Object.defineProperty(configurator,"isServer",{get:function(){return isNode},set:function(a){isNode=a}}),Object.defineProperty(configurator,"getTargetEnvironment",{get:function(){return _getTargetEnvironment},set:function(a){_getTargetEnvironment=a}}),Object.defineProperty(configurator,"getCurrentEnvironment",{get:function(){return _getCurrentEnvironment},set:function(a){_getCurrentEnvironment=a}}),Object.defineProperty(configurator,"defaults",{get:function(){return _defaults},set:function(a){_defaults=a}}),configurator.getTargetEnvironment=function(a){if(isNode){if(a.NODE_ENV)return a.NODE_ENV}else if(a.HOST)return a.HOST;return"default"},configurator.getCurrentEnvironment=function(){if(isNode){return(process.env.NODE_ENV||"default").toLowerCase()}return String(location.host).toLowerCase()},isNode||isAngularNew?module.exports=configurator:isAngularJs?(angular.module("intcConfigurator",[]),angular.module("intcConfigurator").provider("intcConfigurator",function(){var a=configurator;return a.$get=function(){return configurator},a})):self.Configurator=configurator}(this);