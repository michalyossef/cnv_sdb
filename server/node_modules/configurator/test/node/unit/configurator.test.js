/**
 * Module dependencies
 */

var expect = require('chai').expect,
	//_ = require('lodash'),
	configurator = require('./../../../configurator'),
	// run tests on minified version in dist (grunt should be run before tests to ensure most up to date)
	//	configurator = require('./../../../dist/configurator.min.js'),
	config;

/**
 * Test basic functionality
 *
 */

describe('configurator on node.js:', function () {
	before(function () {
		configurator.register(
			{
				NODE_ENV: ['development', 'local'],
				serviceRoot: 'localhost:1337/bob',
				developer: 'drpresto',
				deep: {
					from: 'development_local'
				}
			}
		);
		configurator.register(
			{
				NODE_ENV: /staging/,
				serviceRoot: 'localhost:1337/bob',
				staged: true
			}
		);
		configurator.register(
			{
				serviceRoot: 'default.com:1337/bob',
				deep: {
					from: 'default'
				}
			}
		);
		configurator.registerFile({
			NODE_ENV: 'development',
			path: './test/sue.json',
			as: 'sue'
		});
		configurator.register({
			NODE_ENV: 'hasdefaults',
			stuff: 'specified',
		});
		configurator.registerFile({
			NODE_ENV: 'development',
			path: './test/ann.js',
			as: 'ann'
		});
	});
	describe('development ENV tests', function () {
		before(function () {
			process.env.NODE_ENV = 'development';
			config = configurator.config;
		});
		it('should return the serviceRoot', function (done) {
			//            console.log('in test getEnvironment:', process.env.NODE_ENV);
			expect(config.serviceRoot).to.equal('localhost:1337/bob');
			done();
		});
		it('should return "drpresto" for developer', function (done) {
			expect(config.developer).to.equal('drpresto');
			done();
		});
	});
	describe('hasdefaults ENV tests', function () {
		before(function () {
			process.env.NODE_ENV = 'hasdefaults';
		});
		it('should use defaults if provided', function (done) {
			configurator.defaults = {
				stuff: 'defaulted',
				alsoStuff: 'defaulted',
			}
			config = configurator.config;
			expect(config.stuff).to.equal('specified');
			expect(config.alsoStuff).to.equal('defaulted');
			done();
		});
	});
	describe('deep test', function () {
		before(function () {
			process.env.NODE_ENV = 'development';
			config = configurator.config;
		});
		it('should return "development" for from', function (done) {
			expect(config.deep.from).to.equal('development_local');
			done();
		});
	});
	describe('production ENV tests', function () {
		before(function () {
			process.env.NODE_ENV = 'production';
			config = configurator.config;
		});
		it('should return the serviceRoot', function (done) {
			expect(config.serviceRoot).to.equal('default.com:1337/bob');
			done();
		});
		it('should return undefined for developer', function (done) {
			expect(config.developer).to.equal(undefined);
			done();
		});
	});
	describe('regexp as NODE_ENV tests', function () {
		before(function () {
			process.env.NODE_ENV = 'staging';
			config = configurator.config;
		});
		it('should return true for staged', function (done) {
			expect(config.staged).to.equal(true);
			done();
		});
	});
	describe('register a whole file:', function () {
		before(function () {
			process.env.NODE_ENV = 'development';
			config = configurator.config;
		});
		it('should register json files', function () {
			expect(config.sue.name).to.equal('sue');
		});
		it('should register js files', function () {
			expect(config.ann.name).to.equal('ann');
		});
		it('should ...', function () {
			process.env.NODE_ENV = 'local';
			config = configurator.config;
			expect(config.ann).to.equal(undefined);
		})
	});

});

describe('configurator register an array of environments', function () {
	before(function () {
		// need to reload configurator to ensure not contaminated from previous run.
		/*delete require.cache[_.findWhere(Object.keys(require.cache), function (key) {
			return key.indexOf('configurator.js') > 0
		})];*/
		configurator = require('./../../../configurator');
		configurator.register(
			[
				{
					NODE_ENV: 'development',
					serviceRoot: 'localhost:1337/bob',
					developer: 'drpresto'
				},
				{
					serviceRoot: 'default.com:1337/bob'
				}
			]
		);
	});
	describe('development ENV tests', function () {
		before(function () {
			process.env.NODE_ENV = 'development';
			config = configurator.config;
		});
		it('should return the serviceRoot', function (done) {
			//            console.log('in test getEnvironment:', process.env.NODE_ENV);
			expect(config.serviceRoot).to.equal('localhost:1337/bob');
			done();
		});
		it('should return "drpresto" for developer', function (done) {
			expect(config.developer).to.equal('drpresto');
			done();
		});
	});
	describe('production ENV tests', function () {
		before(function () {
			process.env.NODE_ENV = 'production';
			config = configurator.config;
		});
		it('should return the serviceRoot', function (done) {
			expect(config.serviceRoot).to.equal('default.com:1337/bob');
			done();
		});
		it('should return undefined for developer', function (done) {
			expect(config.developer).to.equal(undefined);
			done();
		});
	});

});

describe('configurator in browser:', function () {
	before(function () {
		// need to reload configurator to ensure not contaminated from previous run.
		/*delete require.cache[_.findWhere(Object.keys(require.cache), function (key) {
			return key.indexOf('configurator.js') > 0
		})];*/
		configurator = require('./../../../configurator');
		configurator.isServer = false;
		configurator.register(
			{
				HOST: 'localhost:8000',
				serviceRoot: 'b-localhost:1337/bob',
				developer: 'b-drpresto'
			}
		);
		configurator.register(
			{
				HOST: ['localhost:8000', 'localhost:8001'],
				bob: true
			}
		);
		configurator.register(
			{
				HOST: /localhost/,
				local: true
			}
		);
		configurator.register(
			{
				serviceRoot: 'b-default.com:1337/bob'
			}
		);
	});
	describe('development ENV tests', function () {
		before(function () {
			location = {
				host: 'localhost:8000'
			};
			config = configurator.config;
		});
		it('should return the serviceRoot', function (done) {
			//            console.log('in test getEnvironment:', process.env.NODE_ENV);
			expect(config.serviceRoot).to.equal('b-localhost:1337/bob');
			done();
		});
		it('should return true for local if regex is working on browser', function (done) {
			expect(config.local).to.equal(true);
			done();
		});
		it('should return "drpresto" for developer', function (done) {
			expect(config.developer).to.equal('b-drpresto');
			done();
		});
		it('should set bob even when there were two HOSTs defined as an array', function (done) {
			expect(config.bob).to.equal(true);
			done();
		});
	});
	describe('production ENV tests', function () {
		before(function () {
			location = {
				host: 'production.com'
			};
			config = configurator.config;
		});
		it('should return the serviceRoot', function (done) {
			expect(config.serviceRoot).to.equal('b-default.com:1337/bob');
			done();
		});
		it('should return undefined for developer', function (done) {
			expect(config.developer).to.equal(undefined);
			done();
		});
	});
});
