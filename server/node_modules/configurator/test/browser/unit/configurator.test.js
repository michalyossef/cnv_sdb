/**
 * Module dependencies
 */
var     config;

/**
 * Test basic functionality
 *
 */

describe('configurator in browser:', function() {
	beforeEach(module('intcConfigurator'));
	beforeEach(inject(['intcConfigurator', function(configurator) {
        configurator.register(
            {
                HOST: 'localhost:8000',
                serviceRoot: 'b-localhost:1337/bob',
                developer: 'b-drpresto'
            }
        );
        configurator.register(
            {
                HOST: ['localhost:8000','localhost:8001'],
                bob: true
            }
        );
        configurator.register(
            {
                HOST: /localhost/,
                local: true
            }
        );
        configurator.register(
            {
                serviceRoot: 'b-default.com:1337/bob'
            }
        );
    }]));
    describe('development ENV tests', function() {
		beforeEach(inject(['intcConfigurator', function(configurator) {
			configurator.getCurrentEnvironment = function() {
				return 'localhost:8000';
			};
            config = configurator.config;
        }]));
        it('should return the serviceRoot', function() {
            expect(config.serviceRoot).toBe('b-localhost:1337/bob');
        });
        it('should return true for local if regex is working on browser', function() {
            expect(config.local).toBe(true);
        });
        it('should return "drpresto" for developer', function() {
            expect(config.developer).toBe('b-drpresto');
        });
        it('should set bob even when there were two HOSTs defined as an array', function() {
            expect(config.bob).toBe(true);
        });
    });
    describe('production ENV tests', function() {
		beforeEach(inject(['intcConfigurator', function(configurator) {
			configurator.getCurrentEnvironment = function() {
				return 'production.com';
			};
            config = configurator.config;
        }]));
        it('should return the serviceRoot', function() {
            expect(config.serviceRoot).toBe('b-default.com:1337/bob');
        });
        it('should return undefined for developer', function() {
            expect(config.developer).toBe(undefined);
        });
    });

});
