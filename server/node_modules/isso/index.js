var path = require('path');
var fs = require('fs');

var validateIssoToken = require('./validateIssoToken');
var isIssoAuthenticated = require('./isIssoAuthenticated');

var tokenGenerateUrl;
var tokenValidateUrl;
var localValidationPath;
var iamUser;
var iamPass;
var issoUserPath;
var routes;
var overrideFile = '/config/isso.override.js';
var _overrides;

module.exports = function (options) {
	options = options || {};

	if (options.Sails) {
		var sails = options;
		var prefix = sails.config.blueprints.prefix || '/v1';

		return {
			defaults: {
				__configKey__: {
					localValidationPath: '/validateisso',
					issoUserPath: '/issouser',
					overrideFile: '/config/isso.override.js',
					routes: '/*'
				}
			},
			configure: function () {
				tokenGenerateUrl = sails.config[this.configKey].tokenGenerateUrl;
				tokenValidateUrl = sails.config[this.configKey].tokenValidateUrl;
				localValidationPath = sails.config[this.configKey].localValidationPath;
				iamUser = sails.config[this.configKey].iamUser;
				iamPass = sails.config[this.configKey].iamPass;
				issoUserPath = sails.config[this.configKey].issoUserPath;
				routes = sails.config[this.configKey].routes;
				overrideFile = sails.config[this.configKey].overrideFile;
				if (Array.isArray(routes)) {
					routes.push(issoUserPath);
				}
				else {
					routes = [routes, issoUserPath];
				}
			},
			initialize: function (next) {
				console.log('Initializing isso module');
				loadOverrides();
				sails.on('router:before', function () {
					sails.router.bind(localValidationPath, validateIssoToken(
						{
							tokenValidateUrl: tokenValidateUrl,
							iamUser: iamUser,
							iamPass: iamPass
						}
					));
					if (Array.isArray(routes)) {
						routes.forEach(function (route) {
							sails.router.bind(route, isIssoAuthenticated(
								{
									tokenGenerateUrl: tokenGenerateUrl,
									localValidationPath: localValidationPath,
									overrides: _overrides
								}
							));
						})
					}
					else {
						sails.router.bind(routes, isIssoAuthenticated(
							{
								tokenGenerateUrl: tokenGenerateUrl,
								localValidationPath: localValidationPath,
								overrides: _overrides
							}
						));
					}
					sails.router.bind(issoUserPath, getIssoUser);
					sails.router.bind(prefix + issoUserPath, getIssoUser);

					function getIssoUser(req, res) {
						if (req.session && req.session.isso && req.session.isso.idsid) {
							return res.json(req.session.isso);
						}
						else {
							console.log('Must not be protected by isso. Should not be possible.');
							res.forbidden();
						}
					}
				});
				return next();
			}
		};
	}
	else {
		overrideFile = options.overrideFile || overrideFile;
		loadOverrides();
		return module.exports;
	}
};
module.exports.validateIssoToken = validateIssoToken;
module.exports.isIssoAuthenticated = isIssoAuthenticated;

function loadOverrides() {
	var overrideFilePath = path.normalize(process.cwd() + overrideFile);
	if (fs.existsSync(overrideFilePath)) {
		_overrides = require(overrideFilePath);
		console.log('isso override in effect.');
	}
}

