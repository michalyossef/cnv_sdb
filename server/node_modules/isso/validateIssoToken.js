var request = require('request-promise');

var pems = require('intel-cacerts').list;

/**
 * @param options:
 *        **All options are optional**
 *            issoValidationRoot {string}: url to validate isso token (on the server)
 *            setIssoInfo {function}: takes isso information and req object. If not provided, req.session will be attempted.
 * @returns {Function}
 */
module.exports = function (options) {
	options = options || {};

	var tokenParameterName;
	var setIssoInfo = options.setIssoInfo;
	var getUserFromToken;

	if (!options.iamUser || !options.iamPass) {
		throw new Error('iamUser and iamPass are required for token validation. \r\n For a sails.js implementation they should be added to a config/isso.js file');
	}
	options.tokenValidateUrl = options.tokenValidateUrl || 'https://iamws-i.intel.com/api/v1/Windows/Auth';

	var iamServiceRoot = options.tokenValidateUrl.replace(/(.*\/api\/v[0-9]+).*/, '$1');
	var iamValidatePath = options.tokenValidateUrl.replace(/.*\/api\/v[0-9]+(.*)/, '$1');
	var iam = require('iam')({
		user: options.iamUser,
		pass: options.iamPass,
		scope: 'Token_WindowsAuth',
		serviceRoot: iamServiceRoot,
		validatePath: iamValidatePath
	});
	tokenParameterName = 'Token';
	originalUrlParameterName = 'originalUrl';
	setIssoInfo = setIssoInfo || function (user, req) {
			if (req.session) {
				if (user.IntelUserExtension) {
					user = user.IntelUserExtension;
				}

				matches = user.userName.match(/([^\\]+)\\([^\\]+)/);
				req.session.isso = {
					domain: matches[1],
					idsid: matches[2],
					raw: user
				};
			}
			else {
				return res.status(500).send('No sessions discovered by isso. Sessions needed to store user info.');
			}
		};
	getUserFromToken = iam.validateWindowsAuthToken;


	return function (req, res) {
		var token = req.query[tokenParameterName] || req.query[tokenParameterName.toLowerCase()];
		if (!token) {
			console.log('no token', req.params, req.query);
			return res.status(403).send('No token');
		}

		getUserFromToken(token)
			.then(function (user) {
					setIssoInfo(user, req);
					var pausedRequest = req.query[originalUrlParameterName];
					if (pausedRequest) {
						return res.redirect(pausedRequest);
					}
					else {
						return res.status(403).send('Try re-sending your request now that your session is established');
					}
				},
				function (error) {
					console.error(error);
					return res.status(403).send('Trouble verifying isso token');

				});
	}
};
